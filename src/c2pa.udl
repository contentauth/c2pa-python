
namespace c2pa {
  string version();
  string sdk_version();
};

[Error]
interface Error {
  Assertion(string reason);
  AssertionNotFound(string reason);
  Decoding(string reason);
  Encoding(string reason);
  FileNotFound(string reason);
  Io(string reason);
  Json(string reason);
  Manifest(string reason);
  ManifestNotFound(string reason);
  NotSupported(string reason);
  Other(string reason);
  RemoteManifest(string reason);
  ResourceNotFound(string reason);
  RwLock();
  Signature(string reason);
  Verify(string reason);
};

enum SigningAlg {
  "Es256",
  "Es384",
  "Es512",
  "Ps256",
  "Ps384",
  "Ps512",
  "Ed25519"
};

enum SeekMode {
  "Start",
  "End",
  "Current"
};

callback interface Stream {
  [Throws=Error]
  bytes read_stream(u64 length);

  [Throws=Error]
  u64 seek_stream(i64 pos, SeekMode mode);

  [Throws=Error]
  u64 write_stream(bytes data);
};

interface Reader {
  constructor();

  [Throws=Error]
  string from_stream([ByRef] string format, [ByRef] Stream reader);

  [Throws=Error]
  string from_manifest_data_and_stream([ByRef] bytes manifest_data, [ByRef] string format, [ByRef] Stream reader);

  [Throws=Error]
  string json();

  [Throws=Error]
  u64 resource_to_stream([ByRef] string uri, [ByRef] Stream stream);
};

callback interface SignerCallback {
  [Throws=Error]
  bytes sign(bytes data);
};

interface CallbackSigner {
  constructor(SignerCallback callback, SigningAlg alg, bytes certs, string? ta_url);
};

interface Builder {
  constructor();

  [Throws=Error]
  void with_json([ByRef] string json);

  [Throws=Error]
  void set_no_embed();

  [Throws=Error]
  void set_remote_url([ByRef] string url);

  [Throws=Error]
  void add_resource([ByRef] string uri, [ByRef] Stream stream );

  [Throws=Error]
  void add_ingredient([ByRef] string ingredient_json, [ByRef] string format, [ByRef] Stream stream );

  [Throws=Error]
  void to_archive([ByRef] Stream stream );

  [Throws=Error]
  void from_archive([ByRef] Stream stream );

  [Throws=Error]
  bytes sign([ByRef] CallbackSigner signer, [ByRef] string format, [ByRef] Stream input, [ByRef] Stream output);

  [Throws=Error]
  bytes sign_file([ByRef] CallbackSigner signer, [ByRef] string input, [ByRef] string output);
};