name: Build Wheel

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      architecture:
        required: false
        type: string
      artifact-name:
        required: true
        type: string
      runs-on:
        required: true
        type: string
        default: 'ubuntu-latest'
    secrets:
      github-token:
        required: true

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    env:
      GITHUB_TOKEN: ${{ secrets.github-token }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Linux wheels
        if: runner.os != 'Windows'
        run: |
          docker run --rm -v $PWD:/io quay.io/pypa/manylinux_2_28_x86_64 bash -c "
            yum install -y gcc gcc-c++ make &&
            mkdir -p /io/artifacts /io/src/c2pa/libs &&
            rm -rf /io/dist /io/build &&
            cd /io &&
            python3 scripts/download_artifacts.py c2pa-v0.55.0 &&
            pip install -r requirements.txt -r requirements-dev.txt &&
            for PYBIN in /opt/python/cp3{10,11}-*/bin; do
              \${PYBIN}/pip install --upgrade pip wheel &&
              \${PYBIN}/python setup.py bdist_wheel
            done &&
            for whl in dist/*.whl; do
              auditwheel repair \"\$whl\" --plat manylinux_2_28_x86_64 -w dist/
            done &&
            rm -f dist/*-linux_*.whl
          "

      - name: Build Windows wheel
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Build wheel
          python setup.py bdist_wheel --plat-name win_amd64

      - name: Build macOS wheel (Intel)
        if: runner.os == 'macOS' && runner.arch == 'x64'
        run: |
          python setup.py bdist_wheel --plat-name macosx_10_9_x86_64

      - name: Build macOS wheel (Apple Silicon)
        if: runner.os == 'macOS' && runner.arch == 'arm64'
        run: |
          python setup.py bdist_wheel --plat-name macosx_11_0_arm64

      - name: Log wheel filename
        shell: bash
        run: |
          echo "Built wheel:"
          ls -l dist/*.whl

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: dist