name: Build Wheel

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      architecture:
        required: false
        type: string
      artifact-name:
        required: true
        type: string
      runs-on:
        required: true
        type: string
        default: 'ubuntu-latest'
    secrets:
      github-token:
        required: true

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          architecture: ${{ inputs.architecture }}
          cache: "pip"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install project development dependencies
        run: python -m pip install -r requirements-dev.txt
      - name: Prepare build directories (Unix)
        shell: bash
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          mkdir -p src/c2pa/libs
          rm -rf dist build

      - name: Prepare build directories (Windows)
        shell: pwsh
        if: runner.os == 'Windows'
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          New-Item -ItemType Directory -Force -Path src/c2pa/libs
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path build) { Remove-Item -Recurse -Force build }
      - name: Download native artifacts (from tag c2pa-v0.55.0)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python3 scripts/download_artifacts.py c2pa-v0.55.0
      - name: Build wheel (Unix)
        if: runner.os != 'Windows'
        run: |
          # Extract platform info from artifact name
          PLATFORM=$(echo "${{ inputs.artifact-name }}" | cut -d'-' -f2)
          ARCH=$(echo "${{ inputs.artifact-name }}" | cut -d'-' -f3)
          # Set environment variable for wheel name
          export WHEEL_NAME="c2pa_python-0.10.7-${PLATFORM}-${ARCH}-py3-none-any.whl"
          # Build wheel with custom name
          python -m build --wheel
          # Rename the wheel file
          mv dist/c2pa_python-*.whl "dist/${WHEEL_NAME}"

      - name: Build wheel (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Extract platform info from artifact name
          $artifactName = "${{ inputs.artifact-name }}"
          $parts = $artifactName -split '-'
          $PLATFORM = $parts[1]
          $ARCH = $parts[2]
          # Set environment variable for wheel name
          $env:WHEEL_NAME = "c2pa_python-0.10.7-${PLATFORM}-${ARCH}-py3-none-any.whl"
          # Build wheel with custom name
          python -m build --wheel
          # Rename the wheel file
          Get-ChildItem -Path dist -Filter "c2pa_python-*.whl" | ForEach-Object {
            Move-Item -Path $_.FullName -Destination "dist/$env:WHEEL_NAME" -Force
          }
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: dist