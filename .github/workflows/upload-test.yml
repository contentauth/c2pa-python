name: Upload Test for Pypi.

on:
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - run: pip install -r requirements.txt
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        if: ${{ matrix.target == 'aarch64' }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          maturin-version: "1.2.0"
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: ${{ matrix.target == 'aarch64' && 'manylinux_2_28' || 'auto' }}
          before-script-linux: |
            pip install uniffi-bindgen==0.24.1

            # ISSUE: https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist
  
  pypi-publish:
    name: upload release to PyPI
    runs-on: ubuntu-latest
    needs: [linux, sdist]

    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: testpublish
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
    steps:
      # retrieve your distributions here
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download aarch64 wheels artifact
        uses: actions/download-artifact@v4
        with:
          name: wheels-aarch64

      - name: Download sdist artifact
        uses: actions/download-artifact@v4
        with:
          name: sdist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/