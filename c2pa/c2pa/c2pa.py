

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_c2pa_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_c2pa_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_c2pa_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_c2pa")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_c2pa_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_c2pa_checksum_func_sdk_version() != 37245:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_func_version() != 61576:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_add_ingredient() != 56163:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_add_resource() != 52123:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_from_archive() != 45068:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_set_no_embed() != 4775:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_set_remote_url() != 26105:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_sign() != 5940:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_sign_file() != 2785:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_to_archive() != 56076:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_builder_with_json() != 60973:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_reader_from_manifest_data_and_stream() != 58448:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_reader_from_stream() != 62816:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_reader_json() != 25079:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_reader_resource_to_stream() != 32633:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_constructor_builder_new() != 43948:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_constructor_callbacksigner_new() != 65452:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_constructor_callbacksigner_new_from_signer() != 27376:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_constructor_reader_new() != 19939:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_signercallback_sign() != 64776:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_stream_read_stream() != 16779:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_stream_seek_stream() != 39220:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_c2pa_checksum_method_stream_write_stream() != 63217:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UNIFFI_CALLBACK_INTERFACE_SIGNER_CALLBACK_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_uint64,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_uint64),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD2 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_uint64),
    ctypes.POINTER(_UniffiRustCallStatus),
)
class _UniffiVTableCallbackInterfaceSignerCallback(ctypes.Structure):
    _fields_ = [
        ("sign", _UNIFFI_CALLBACK_INTERFACE_SIGNER_CALLBACK_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class _UniffiVTableCallbackInterfaceStream(ctypes.Structure):
    _fields_ = [
        ("read_stream", _UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD0),
        ("seek_stream", _UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD1),
        ("write_stream", _UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD2),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_c2pa_fn_clone_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_clone_builder.restype = ctypes.c_void_p
_UniffiLib.uniffi_c2pa_fn_free_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_free_builder.restype = None
_UniffiLib.uniffi_c2pa_fn_constructor_builder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_constructor_builder_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_c2pa_fn_method_builder_add_ingredient.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_add_ingredient.restype = None
_UniffiLib.uniffi_c2pa_fn_method_builder_add_resource.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_add_resource.restype = None
_UniffiLib.uniffi_c2pa_fn_method_builder_from_archive.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_from_archive.restype = None
_UniffiLib.uniffi_c2pa_fn_method_builder_set_no_embed.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_set_no_embed.restype = None
_UniffiLib.uniffi_c2pa_fn_method_builder_set_remote_url.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_set_remote_url.restype = None
_UniffiLib.uniffi_c2pa_fn_method_builder_sign.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_sign.restype = _UniffiRustBuffer
_UniffiLib.uniffi_c2pa_fn_method_builder_sign_file.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_sign_file.restype = _UniffiRustBuffer
_UniffiLib.uniffi_c2pa_fn_method_builder_to_archive.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_to_archive.restype = None
_UniffiLib.uniffi_c2pa_fn_method_builder_with_json.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_builder_with_json.restype = None
_UniffiLib.uniffi_c2pa_fn_clone_callbacksigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_clone_callbacksigner.restype = ctypes.c_void_p
_UniffiLib.uniffi_c2pa_fn_free_callbacksigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_free_callbacksigner.restype = None
_UniffiLib.uniffi_c2pa_fn_constructor_callbacksigner_new.argtypes = (
    ctypes.c_uint64,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_constructor_callbacksigner_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_c2pa_fn_constructor_callbacksigner_new_from_signer.argtypes = (
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_constructor_callbacksigner_new_from_signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_c2pa_fn_clone_reader.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_clone_reader.restype = ctypes.c_void_p
_UniffiLib.uniffi_c2pa_fn_free_reader.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_free_reader.restype = None
_UniffiLib.uniffi_c2pa_fn_constructor_reader_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_constructor_reader_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_c2pa_fn_method_reader_from_manifest_data_and_stream.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_reader_from_manifest_data_and_stream.restype = _UniffiRustBuffer
_UniffiLib.uniffi_c2pa_fn_method_reader_from_stream.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_reader_from_stream.restype = _UniffiRustBuffer
_UniffiLib.uniffi_c2pa_fn_method_reader_json.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_reader_json.restype = _UniffiRustBuffer
_UniffiLib.uniffi_c2pa_fn_method_reader_resource_to_stream.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_method_reader_resource_to_stream.restype = ctypes.c_uint64
_UniffiLib.uniffi_c2pa_fn_init_callback_vtable_signercallback.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceSignerCallback),
)
_UniffiLib.uniffi_c2pa_fn_init_callback_vtable_signercallback.restype = None
_UniffiLib.uniffi_c2pa_fn_init_callback_vtable_stream.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceStream),
)
_UniffiLib.uniffi_c2pa_fn_init_callback_vtable_stream.restype = None
_UniffiLib.uniffi_c2pa_fn_func_sdk_version.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_func_sdk_version.restype = _UniffiRustBuffer
_UniffiLib.uniffi_c2pa_fn_func_version.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_c2pa_fn_func_version.restype = _UniffiRustBuffer
_UniffiLib.ffi_c2pa_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_c2pa_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_c2pa_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rustbuffer_free.restype = None
_UniffiLib.ffi_c2pa_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_c2pa_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_u8.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_u8.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_c2pa_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_i8.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_i8.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_c2pa_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_u16.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_u16.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_c2pa_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_i16.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_i16.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_c2pa_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_u32.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_u32.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_c2pa_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_i32.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_i32.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_c2pa_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_u64.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_u64.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_c2pa_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_i64.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_i64.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_c2pa_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_f32.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_f32.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_c2pa_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_f64.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_f64.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_c2pa_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_pointer.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_c2pa_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_c2pa_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_poll_void.restype = None
_UniffiLib.ffi_c2pa_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_cancel_void.restype = None
_UniffiLib.ffi_c2pa_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_c2pa_rust_future_free_void.restype = None
_UniffiLib.ffi_c2pa_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_c2pa_rust_future_complete_void.restype = None
_UniffiLib.uniffi_c2pa_checksum_func_sdk_version.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_func_sdk_version.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_func_version.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_func_version.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_add_ingredient.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_add_ingredient.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_add_resource.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_add_resource.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_from_archive.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_from_archive.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_set_no_embed.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_set_no_embed.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_set_remote_url.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_set_remote_url.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_sign.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_sign.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_sign_file.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_sign_file.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_to_archive.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_to_archive.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_builder_with_json.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_builder_with_json.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_reader_from_manifest_data_and_stream.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_reader_from_manifest_data_and_stream.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_reader_from_stream.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_reader_from_stream.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_reader_json.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_reader_json.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_reader_resource_to_stream.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_reader_resource_to_stream.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_constructor_builder_new.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_constructor_builder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_constructor_callbacksigner_new.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_constructor_callbacksigner_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_constructor_callbacksigner_new_from_signer.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_constructor_callbacksigner_new_from_signer.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_constructor_reader_new.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_constructor_reader_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_signercallback_sign.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_signercallback_sign.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_stream_read_stream.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_stream_read_stream.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_stream_seek_stream.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_stream_seek_stream.restype = ctypes.c_uint16
_UniffiLib.uniffi_c2pa_checksum_method_stream_write_stream.argtypes = (
)
_UniffiLib.uniffi_c2pa_checksum_method_stream_write_stream.restype = ctypes.c_uint16
_UniffiLib.ffi_c2pa_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_c2pa_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write(value, buf):
        buf.write_i64(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)



class BuilderProtocol(typing.Protocol):
    def add_ingredient(self, ingredient_json: "str",format: "str",stream: "Stream"):
        raise NotImplementedError
    def add_resource(self, uri: "str",stream: "Stream"):
        raise NotImplementedError
    def from_archive(self, stream: "Stream"):
        raise NotImplementedError
    def set_no_embed(self, ):
        raise NotImplementedError
    def set_remote_url(self, url: "str"):
        raise NotImplementedError
    def sign(self, signer: "CallbackSigner",format: "str",input: "Stream",output: "Stream"):
        raise NotImplementedError
    def sign_file(self, signer: "CallbackSigner",input: "str",output: "str"):
        raise NotImplementedError
    def to_archive(self, stream: "Stream"):
        raise NotImplementedError
    def with_json(self, json: "str"):
        raise NotImplementedError


class Builder:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_constructor_builder_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_free_builder, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_clone_builder, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def add_ingredient(self, ingredient_json: "str",format: "str",stream: "Stream") -> None:
        _UniffiConverterString.check_lower(ingredient_json)
        
        _UniffiConverterString.check_lower(format)
        
        _UniffiConverterCallbackInterfaceStream.check_lower(stream)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_add_ingredient,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(ingredient_json),
        _UniffiConverterString.lower(format),
        _UniffiConverterCallbackInterfaceStream.lower(stream))






    def add_resource(self, uri: "str",stream: "Stream") -> None:
        _UniffiConverterString.check_lower(uri)
        
        _UniffiConverterCallbackInterfaceStream.check_lower(stream)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_add_resource,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(uri),
        _UniffiConverterCallbackInterfaceStream.lower(stream))






    def from_archive(self, stream: "Stream") -> None:
        _UniffiConverterCallbackInterfaceStream.check_lower(stream)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_from_archive,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceStream.lower(stream))






    def set_no_embed(self, ) -> None:
        _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_set_no_embed,self._uniffi_clone_pointer(),)






    def set_remote_url(self, url: "str") -> None:
        _UniffiConverterString.check_lower(url)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_set_remote_url,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))






    def sign(self, signer: "CallbackSigner",format: "str",input: "Stream",output: "Stream") -> "bytes":
        _UniffiConverterTypeCallbackSigner.check_lower(signer)
        
        _UniffiConverterString.check_lower(format)
        
        _UniffiConverterCallbackInterfaceStream.check_lower(input)
        
        _UniffiConverterCallbackInterfaceStream.check_lower(output)
        
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_sign,self._uniffi_clone_pointer(),
        _UniffiConverterTypeCallbackSigner.lower(signer),
        _UniffiConverterString.lower(format),
        _UniffiConverterCallbackInterfaceStream.lower(input),
        _UniffiConverterCallbackInterfaceStream.lower(output))
        )





    def sign_file(self, signer: "CallbackSigner",input: "str",output: "str") -> "bytes":
        _UniffiConverterTypeCallbackSigner.check_lower(signer)
        
        _UniffiConverterString.check_lower(input)
        
        _UniffiConverterString.check_lower(output)
        
        return _UniffiConverterBytes.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_sign_file,self._uniffi_clone_pointer(),
        _UniffiConverterTypeCallbackSigner.lower(signer),
        _UniffiConverterString.lower(input),
        _UniffiConverterString.lower(output))
        )





    def to_archive(self, stream: "Stream") -> None:
        _UniffiConverterCallbackInterfaceStream.check_lower(stream)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_to_archive,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceStream.lower(stream))






    def with_json(self, json: "str") -> None:
        _UniffiConverterString.check_lower(json)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_builder_with_json,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(json))







class _UniffiConverterTypeBuilder:

    @staticmethod
    def lift(value: int):
        return Builder._make_instance_(value)

    @staticmethod
    def check_lower(value: Builder):
        if not isinstance(value, Builder):
            raise TypeError("Expected Builder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: BuilderProtocol):
        if not isinstance(value, Builder):
            raise TypeError("Expected Builder instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: BuilderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class CallbackSignerProtocol(typing.Protocol):
    pass


class CallbackSigner:
    _pointer: ctypes.c_void_p
    def __init__(self, callback: "SignerCallback",alg: "SigningAlg",certs: "bytes",ta_url: "typing.Optional[str]"):
        _UniffiConverterCallbackInterfaceSignerCallback.check_lower(callback)
        
        _UniffiConverterTypeSigningAlg.check_lower(alg)
        
        _UniffiConverterBytes.check_lower(certs)
        
        _UniffiConverterOptionalString.check_lower(ta_url)
        
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_constructor_callbacksigner_new,
        _UniffiConverterCallbackInterfaceSignerCallback.lower(callback),
        _UniffiConverterTypeSigningAlg.lower(alg),
        _UniffiConverterBytes.lower(certs),
        _UniffiConverterOptionalString.lower(ta_url))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_free_callbacksigner, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_clone_callbacksigner, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def new_from_signer(cls, callback: "SignerCallback",alg: "SigningAlg",reserve_size: "int"):
        _UniffiConverterCallbackInterfaceSignerCallback.check_lower(callback)
        
        _UniffiConverterTypeSigningAlg.check_lower(alg)
        
        _UniffiConverterUInt32.check_lower(reserve_size)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_constructor_callbacksigner_new_from_signer,
        _UniffiConverterCallbackInterfaceSignerCallback.lower(callback),
        _UniffiConverterTypeSigningAlg.lower(alg),
        _UniffiConverterUInt32.lower(reserve_size))
        return cls._make_instance_(pointer)




class _UniffiConverterTypeCallbackSigner:

    @staticmethod
    def lift(value: int):
        return CallbackSigner._make_instance_(value)

    @staticmethod
    def check_lower(value: CallbackSigner):
        if not isinstance(value, CallbackSigner):
            raise TypeError("Expected CallbackSigner instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CallbackSignerProtocol):
        if not isinstance(value, CallbackSigner):
            raise TypeError("Expected CallbackSigner instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CallbackSignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ReaderProtocol(typing.Protocol):
    def from_manifest_data_and_stream(self, manifest_data: "bytes",format: "str",reader: "Stream"):
        raise NotImplementedError
    def from_stream(self, format: "str",reader: "Stream"):
        raise NotImplementedError
    def json(self, ):
        raise NotImplementedError
    def resource_to_stream(self, uri: "str",stream: "Stream"):
        raise NotImplementedError


class Reader:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_constructor_reader_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_free_reader, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_clone_reader, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def from_manifest_data_and_stream(self, manifest_data: "bytes",format: "str",reader: "Stream") -> "str":
        _UniffiConverterBytes.check_lower(manifest_data)
        
        _UniffiConverterString.check_lower(format)
        
        _UniffiConverterCallbackInterfaceStream.check_lower(reader)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_reader_from_manifest_data_and_stream,self._uniffi_clone_pointer(),
        _UniffiConverterBytes.lower(manifest_data),
        _UniffiConverterString.lower(format),
        _UniffiConverterCallbackInterfaceStream.lower(reader))
        )





    def from_stream(self, format: "str",reader: "Stream") -> "str":
        _UniffiConverterString.check_lower(format)
        
        _UniffiConverterCallbackInterfaceStream.check_lower(reader)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_reader_from_stream,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(format),
        _UniffiConverterCallbackInterfaceStream.lower(reader))
        )





    def json(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_reader_json,self._uniffi_clone_pointer(),)
        )





    def resource_to_stream(self, uri: "str",stream: "Stream") -> "int":
        _UniffiConverterString.check_lower(uri)
        
        _UniffiConverterCallbackInterfaceStream.check_lower(stream)
        
        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_c2pa_fn_method_reader_resource_to_stream,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(uri),
        _UniffiConverterCallbackInterfaceStream.lower(stream))
        )






class _UniffiConverterTypeReader:

    @staticmethod
    def lift(value: int):
        return Reader._make_instance_(value)

    @staticmethod
    def check_lower(value: Reader):
        if not isinstance(value, Reader):
            raise TypeError("Expected Reader instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ReaderProtocol):
        if not isinstance(value, Reader):
            raise TypeError("Expected Reader instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ReaderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


# Error
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class Error(Exception):
    pass

_UniffiTempError = Error

class Error:  # type: ignore
    class Assertion(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Assertion({})".format(str(self))
    _UniffiTempError.Assertion = Assertion # type: ignore
    class AssertionNotFound(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.AssertionNotFound({})".format(str(self))
    _UniffiTempError.AssertionNotFound = AssertionNotFound # type: ignore
    class Decoding(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Decoding({})".format(str(self))
    _UniffiTempError.Decoding = Decoding # type: ignore
    class Encoding(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Encoding({})".format(str(self))
    _UniffiTempError.Encoding = Encoding # type: ignore
    class FileNotFound(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.FileNotFound({})".format(str(self))
    _UniffiTempError.FileNotFound = FileNotFound # type: ignore
    class Io(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Io({})".format(str(self))
    _UniffiTempError.Io = Io # type: ignore
    class Json(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Json({})".format(str(self))
    _UniffiTempError.Json = Json # type: ignore
    class Manifest(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Manifest({})".format(str(self))
    _UniffiTempError.Manifest = Manifest # type: ignore
    class ManifestNotFound(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.ManifestNotFound({})".format(str(self))
    _UniffiTempError.ManifestNotFound = ManifestNotFound # type: ignore
    class NotSupported(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.NotSupported({})".format(str(self))
    _UniffiTempError.NotSupported = NotSupported # type: ignore
    class Other(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Other({})".format(str(self))
    _UniffiTempError.Other = Other # type: ignore
    class RemoteManifest(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.RemoteManifest({})".format(str(self))
    _UniffiTempError.RemoteManifest = RemoteManifest # type: ignore
    class ResourceNotFound(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.ResourceNotFound({})".format(str(self))
    _UniffiTempError.ResourceNotFound = ResourceNotFound # type: ignore
    class RwLock(_UniffiTempError):
        def __init__(self):
            pass

        def __repr__(self):
            return "Error.RwLock({})".format(str(self))
    _UniffiTempError.RwLock = RwLock # type: ignore
    class Signature(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Signature({})".format(str(self))
    _UniffiTempError.Signature = Signature # type: ignore
    class Verify(_UniffiTempError):
        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason

        def __repr__(self):
            return "Error.Verify({})".format(str(self))
    _UniffiTempError.Verify = Verify # type: ignore

Error = _UniffiTempError # type: ignore
del _UniffiTempError


class _UniffiConverterTypeError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Error.Assertion(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return Error.AssertionNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return Error.Decoding(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return Error.Encoding(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return Error.FileNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 6:
            return Error.Io(
                _UniffiConverterString.read(buf),
            )
        if variant == 7:
            return Error.Json(
                _UniffiConverterString.read(buf),
            )
        if variant == 8:
            return Error.Manifest(
                _UniffiConverterString.read(buf),
            )
        if variant == 9:
            return Error.ManifestNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 10:
            return Error.NotSupported(
                _UniffiConverterString.read(buf),
            )
        if variant == 11:
            return Error.Other(
                _UniffiConverterString.read(buf),
            )
        if variant == 12:
            return Error.RemoteManifest(
                _UniffiConverterString.read(buf),
            )
        if variant == 13:
            return Error.ResourceNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 14:
            return Error.RwLock(
            )
        if variant == 15:
            return Error.Signature(
                _UniffiConverterString.read(buf),
            )
        if variant == 16:
            return Error.Verify(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, Error.Assertion):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.AssertionNotFound):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.Decoding):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.Encoding):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.FileNotFound):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.Io):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.Json):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.Manifest):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.ManifestNotFound):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.NotSupported):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.Other):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.RemoteManifest):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.ResourceNotFound):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.RwLock):
            return
        if isinstance(value, Error.Signature):
            _UniffiConverterString.check_lower(value.reason)
            return
        if isinstance(value, Error.Verify):
            _UniffiConverterString.check_lower(value.reason)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, Error.Assertion):
            buf.write_i32(1)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.AssertionNotFound):
            buf.write_i32(2)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.Decoding):
            buf.write_i32(3)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.Encoding):
            buf.write_i32(4)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.FileNotFound):
            buf.write_i32(5)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.Io):
            buf.write_i32(6)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.Json):
            buf.write_i32(7)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.Manifest):
            buf.write_i32(8)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.ManifestNotFound):
            buf.write_i32(9)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.NotSupported):
            buf.write_i32(10)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.Other):
            buf.write_i32(11)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.RemoteManifest):
            buf.write_i32(12)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.ResourceNotFound):
            buf.write_i32(13)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.RwLock):
            buf.write_i32(14)
        if isinstance(value, Error.Signature):
            buf.write_i32(15)
            _UniffiConverterString.write(value.reason, buf)
        if isinstance(value, Error.Verify):
            buf.write_i32(16)
            _UniffiConverterString.write(value.reason, buf)





class SeekMode(enum.Enum):
    START = 0
    
    END = 1
    
    CURRENT = 2
    


class _UniffiConverterTypeSeekMode(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return SeekMode.START
        if variant == 2:
            return SeekMode.END
        if variant == 3:
            return SeekMode.CURRENT
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == SeekMode.START:
            return
        if value == SeekMode.END:
            return
        if value == SeekMode.CURRENT:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == SeekMode.START:
            buf.write_i32(1)
        if value == SeekMode.END:
            buf.write_i32(2)
        if value == SeekMode.CURRENT:
            buf.write_i32(3)







class SigningAlg(enum.Enum):
    ES256 = 0
    
    ES384 = 1
    
    ES512 = 2
    
    PS256 = 3
    
    PS384 = 4
    
    PS512 = 5
    
    ED25519 = 6
    


class _UniffiConverterTypeSigningAlg(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return SigningAlg.ES256
        if variant == 2:
            return SigningAlg.ES384
        if variant == 3:
            return SigningAlg.ES512
        if variant == 4:
            return SigningAlg.PS256
        if variant == 5:
            return SigningAlg.PS384
        if variant == 6:
            return SigningAlg.PS512
        if variant == 7:
            return SigningAlg.ED25519
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == SigningAlg.ES256:
            return
        if value == SigningAlg.ES384:
            return
        if value == SigningAlg.ES512:
            return
        if value == SigningAlg.PS256:
            return
        if value == SigningAlg.PS384:
            return
        if value == SigningAlg.PS512:
            return
        if value == SigningAlg.ED25519:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == SigningAlg.ES256:
            buf.write_i32(1)
        if value == SigningAlg.ES384:
            buf.write_i32(2)
        if value == SigningAlg.ES512:
            buf.write_i32(3)
        if value == SigningAlg.PS256:
            buf.write_i32(4)
        if value == SigningAlg.PS384:
            buf.write_i32(5)
        if value == SigningAlg.PS512:
            buf.write_i32(6)
        if value == SigningAlg.ED25519:
            buf.write_i32(7)





class SignerCallback(typing.Protocol):
    def sign(self, data: "bytes"):
        raise NotImplementedError
# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
_UNIFFI_IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplSignerCallback:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_SIGNER_CALLBACK_METHOD0
    def sign(
            uniffi_handle,
            data,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceSignerCallback._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterBytes.lift(data), )
            method = uniffi_obj.sign
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBytes.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Error,
                _UniffiConverterTypeError.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceSignerCallback._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceSignerCallback(
        sign,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_c2pa_fn_init_callback_vtable_signercallback(ctypes.byref(_uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceSignerCallback = _UniffiCallbackInterfaceFfiConverter()



class Stream(typing.Protocol):
    def read_stream(self, length: "int"):
        raise NotImplementedError
    def seek_stream(self, pos: "int",mode: "SeekMode"):
        raise NotImplementedError
    def write_stream(self, data: "bytes"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplStream:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD0
    def read_stream(
            uniffi_handle,
            length,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceStream._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterUInt64.lift(length), )
            method = uniffi_obj.read_stream
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBytes.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Error,
                _UniffiConverterTypeError.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD1
    def seek_stream(
            uniffi_handle,
            pos,
            mode,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceStream._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterInt64.lift(pos), _UniffiConverterTypeSeekMode.lift(mode), )
            method = uniffi_obj.seek_stream
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterUInt64.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Error,
                _UniffiConverterTypeError.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STREAM_METHOD2
    def write_stream(
            uniffi_handle,
            data,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceStream._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterBytes.lift(data), )
            method = uniffi_obj.write_stream
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterUInt64.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Error,
                _UniffiConverterTypeError.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceStream._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceStream(
        read_stream,
        seek_stream,
        write_stream,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_c2pa_fn_init_callback_vtable_stream(ctypes.byref(_uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceStream = _UniffiCallbackInterfaceFfiConverter()



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")

# Async support

def sdk_version() -> "str":
    return _UniffiConverterString.lift(_uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_func_sdk_version,))


def version() -> "str":
    return _UniffiConverterString.lift(_uniffi_rust_call(_UniffiLib.uniffi_c2pa_fn_func_version,))


__all__ = [
    "InternalError",
    "Error",
    "SeekMode",
    "SigningAlg",
    "sdk_version",
    "version",
    "Builder",
    "CallbackSigner",
    "Reader",
    "SignerCallback",
    "Stream",
]

